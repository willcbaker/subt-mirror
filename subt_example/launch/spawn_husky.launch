<?xml version="1.0"?>

<!-- reference: https://github.com/bsb808/nre_simmultihusky/blob/master/launch/husky.launch -->
<launch>
  <arg name="namespace" default="robot1"/>
  <!-- Generate the tf_prefix from the namespace -->
  <arg name="tfpre" default="$(arg namespace)_tf" />
  <!-- Put value on the parameter server in the group's namespace -->
  <param name="tf_prefix" value="$(arg namespace)_tf" />

  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="laser_enabled" default="false"/>
  <arg name="kinect_enabled" default="false"/>
  <arg name="ur5_enabled" default="false"/>
  <arg name="urdf_extras" default=""/>

  <group ns="$(arg namespace)">
    <!-- load robot description -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find subt_example)/urdf/husky.urdf.xacro'
             laser_enabled:=$(arg laser_enabled)
             ur5_enabled:=$(arg ur5_enabled)
             kinect_enabled:=$(arg kinect_enabled)
             nsp:=$(arg namespace)
             tfpre:=$(arg tfpre)
             urdf_extras:=$(arg urdf_extras)
             " />

    <!-- spawn the model with a specified name -->
    <node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model"
      args="-x $(arg x) -y $(arg y) -Y 0 -unpause -urdf -param robot_description -model Husky_$(arg namespace)"/>

    <!-- publish the robot's states -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

    <!-- load control configurations -->
    <rosparam command="load" file="$(find husky_control)/config/control.yaml" />

    <!-- substitute the base link frame -->
    <rosparam param="husky_velocity_controller/base_frame_id" subst_value="True">$(arg tfpre)/base_link</rosparam>

    <!-- spawn a controller -->
    <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="husky_joint_publisher husky_velocity_controller --shutdown-timeout 3"/>

    <!-- localication -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
        <rosparam command="load" file="$(find husky_control)/config/localization.yaml" />
    </node>

    <!-- Fake localization: Uses the ground truth odometry from the
           P3D Gazebo plugin. This is necessary to provide a global frame
           of reference.
    <node pkg="fake_localization" type="fake_localization" name="fake_localization">
      <param name="odom_frame_id" value="$(arg tfpre)/odom" />
      <param name="delta_x" value="$(arg initX)" />
      <param name="delta_y" value="$(arg initY)" />
      <param name="delta_yaw" value="$(arg initYaw)" />
      <param name="base_frame_id" value="$(arg tfpre)/base_link" />
    </node>
    -->
    <!-- Or we could just set this as a static offset -->
    <node pkg="tf" type="static_transform_publisher" name="map_odom_broadcaster" args="$(arg x) $(arg y) 0 0 0 0 /map /$(arg tfpre)/odom 100" />

    <!-- Twister server for rviz control-->
    <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen">
      <param name="link_name" value="$(arg tfpre)/base_link" />
    </node>

    <!-- Twist mux is a node from Clearpath that mixes control commands from multiple sources -->
    <node pkg="twist_mux" type="twist_mux" name="twist_mux">
      <rosparam command="load" file="$(find husky_control)/config/twist_mux.yaml" />
      <remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/>
    </node>

  </group>
</launch>
